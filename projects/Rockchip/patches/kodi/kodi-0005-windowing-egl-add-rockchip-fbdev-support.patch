From ffeb2a955efaaec97a751dc579e3e1cde540a4be Mon Sep 17 00:00:00 2001
From: Jonas Karlman <jonas@kwiboo.se>
Date: Tue, 28 Mar 2017 22:47:01 +0200
Subject: [PATCH 5/7] windowing/egl: add rockchip fbdev support

---
 project/cmake/CMakeLists.txt                 |   2 +
 project/cmake/modules/FindRK.cmake           |  28 +++
 xbmc/windowing/egl/CMakeLists.txt            |   7 +-
 xbmc/windowing/egl/EGLNativeTypeRockchip.cpp | 250 +++++++++++++++++++++++++++
 xbmc/windowing/egl/EGLNativeTypeRockchip.h   |  58 +++++++
 xbmc/windowing/egl/EGLWrapper.cpp            |   5 +
 6 files changed, 349 insertions(+), 1 deletion(-)
 create mode 100644 project/cmake/modules/FindRK.cmake
 create mode 100644 xbmc/windowing/egl/EGLNativeTypeRockchip.cpp
 create mode 100644 xbmc/windowing/egl/EGLNativeTypeRockchip.h

diff --git a/project/cmake/CMakeLists.txt b/project/cmake/CMakeLists.txt
index 74870c117d..069d720d0b 100644
--- a/project/cmake/CMakeLists.txt
+++ b/project/cmake/CMakeLists.txt
@@ -57,6 +57,7 @@ if(UNIX)
     option(ENABLE_X11         "Enable X11 support?" ON)
     option(ENABLE_AML         "Enable AML?" OFF)
     option(ENABLE_IMX         "Enable IMX?" OFF)
+    option(ENABLE_RK          "Enable RK?" OFF)
   endif()
 endif()
 # System options
@@ -218,6 +219,7 @@ endif()
 if(CORE_SYSTEM_NAME STREQUAL android OR CORE_SYSTEM_NAME STREQUAL linux)
   core_optional_dep(AML)
   core_optional_dep(IMX)
+  core_optional_dep(RK)
 elseif(CORE_SYSTEM_NAME STREQUAL rbpi)
   core_require_dep(MMAL)
 endif()
diff --git a/project/cmake/modules/FindRK.cmake b/project/cmake/modules/FindRK.cmake
new file mode 100644
index 0000000000..ffec62548b
--- /dev/null
+++ b/project/cmake/modules/FindRK.cmake
@@ -0,0 +1,28 @@
+#.rst:
+# FindRK
+# -------
+# Finds the Rockchip MPP
+#
+# This will will define the following variables::
+#
+# RK_FOUND - system has RK
+# RK_LIBRARIES - the RK libraries
+# RK_DEFINITIONS - the RK definitions
+
+if(PKG_CONFIG_FOUND)
+  pkg_check_modules(RK rockchip_mpp QUIET)
+endif()
+
+find_library(RKMPP_LIBRARY NAMES rockchip_mpp
+                           PATHS ${PC_RK_LIBDIR})
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(RK
+                                  REQUIRED_VARS RKMPP_LIBRARY)
+
+if(RK_FOUND)
+  set(RK_LIBRARIES ${RKMPP_LIBRARY})
+  set(RK_DEFINITIONS -DHAS_RKMPP=1)
+endif()
+
+mark_as_advanced(RKMPP_LIBRARY)
diff --git a/xbmc/windowing/egl/CMakeLists.txt b/xbmc/windowing/egl/CMakeLists.txt
index b1eaeccc89..61ff05edf1 100644
--- a/xbmc/windowing/egl/CMakeLists.txt
+++ b/xbmc/windowing/egl/CMakeLists.txt
@@ -1,5 +1,5 @@
 if (NOT GBM_FOUND)
-  if(OPENGLES_FOUND OR AML_FOUND OR IMX_FOUND OR MMAL_FOUND)
+  if(OPENGLES_FOUND OR AML_FOUND OR IMX_FOUND OR MMAL_FOUND OR RK_FOUND)
     set(SOURCES EGLWrapper.cpp)
 
     set(HEADERS EGLNativeType.h
@@ -37,6 +37,11 @@ if(IMX_FOUND)
   list(APPEND HEADERS EGLNativeTypeIMX.h)
 endif()
 
+if(RK_FOUND)
+  list(APPEND SOURCES EGLNativeTypeRockchip.cpp)
+  list(APPEND HEADERS EGLNativeTypeRockchip.h)
+endif()
+
 if(SOURCES)
   core_add_library(windowing_egl)
 endif()
diff --git a/xbmc/windowing/egl/EGLNativeTypeRockchip.cpp b/xbmc/windowing/egl/EGLNativeTypeRockchip.cpp
new file mode 100644
index 0000000000..3bc13649ed
--- /dev/null
+++ b/xbmc/windowing/egl/EGLNativeTypeRockchip.cpp
@@ -0,0 +1,250 @@
+/*
+ *      Copyright (C) 2017 Team Kodi
+ *      http://kodi.tv
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this Program; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "EGLNativeTypeRockchip.h"
+#include "guilib/gui3d.h"
+#include "utils/RegExp.h"
+#include "utils/StringUtils.h"
+#include "utils/SysfsUtils.h"
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <linux/fb.h>
+#include <sys/ioctl.h>
+#include <EGL/egl.h>
+
+CEGLNativeTypeRockchip::CEGLNativeTypeRockchip()
+{
+  const char *env_framebuffer = getenv("FRAMEBUFFER");
+
+  // default to framebuffer 0
+  m_framebuffer_name = "fb0";
+  if (env_framebuffer)
+  {
+    std::string framebuffer(env_framebuffer);
+    std::string::size_type start = framebuffer.find("fb");
+    m_framebuffer_name = framebuffer.substr(start);
+  }
+  m_nativeWindow = NULL;
+}
+
+CEGLNativeTypeRockchip::~CEGLNativeTypeRockchip()
+{
+}
+
+static bool RockchipModeToResolution(std::string mode, RESOLUTION_INFO *res)
+{
+  if (!res)
+    return false;
+
+  res->iWidth = 0;
+  res->iHeight= 0;
+
+  if (mode.empty())
+    return false;
+
+  std::string fromMode = mode;
+  if (!isdigit(mode[0]))
+    fromMode = StringUtils::Mid(mode, 2);
+  StringUtils::Trim(fromMode);
+
+  CRegExp split(true);
+  split.RegComp("([0-9]+)x([0-9]+)([pi])-([0-9]+)");
+  if (split.RegFind(fromMode) < 0)
+    return false;
+
+  int w = atoi(split.GetMatch(1).c_str());
+  int h = atoi(split.GetMatch(2).c_str());
+  std::string p = split.GetMatch(3);
+  int r = atoi(split.GetMatch(4).c_str());
+
+  res->iWidth = w;
+  res->iHeight= h;
+  res->iScreenWidth = w;
+  res->iScreenHeight= h;
+  res->fRefreshRate = r;
+  res->dwFlags = p[0] == 'p' ? D3DPRESENTFLAG_PROGRESSIVE : D3DPRESENTFLAG_INTERLACED;
+
+  res->iScreen       = 0;
+  res->bFullScreen   = true;
+  res->iSubtitles    = (int)(0.965 * res->iHeight);
+  res->fPixelRatio   = 1.0f;
+  res->strMode       = StringUtils::Format("%dx%d @ %.2f%s - Full Screen", res->iScreenWidth, res->iScreenHeight, res->fRefreshRate,
+                                           res->dwFlags & D3DPRESENTFLAG_INTERLACED ? "i" : "");
+  res->strId         = mode;
+
+  return res->iWidth > 0 && res->iHeight> 0;
+}
+
+bool CEGLNativeTypeRockchip::CheckCompatibility()
+{
+  std::string name;
+  std::string modalias = "/sys/class/drm/card0/device/graphics/" + m_framebuffer_name + "/device/modalias";
+
+  SysfsUtils::GetString(modalias, name);
+  if (name.find("rockchip") != std::string::npos)
+    return true;
+  return false;
+}
+
+void CEGLNativeTypeRockchip::Initialize()
+{
+}
+void CEGLNativeTypeRockchip::Destroy()
+{
+}
+
+bool CEGLNativeTypeRockchip::CreateNativeDisplay()
+{
+  m_nativeDisplay = EGL_DEFAULT_DISPLAY;
+  return true;
+}
+
+bool CEGLNativeTypeRockchip::CreateNativeWindow()
+{
+#if defined(_FBDEV_WINDOW_H_)
+  fbdev_window *nativeWindow = new fbdev_window;
+  if (!nativeWindow)
+    return false;
+
+  nativeWindow->width = 1920;
+  nativeWindow->height = 1080;
+  m_nativeWindow = nativeWindow;
+
+  SetFramebufferResolution(nativeWindow->width, nativeWindow->height);
+
+  return true;
+#else
+  return false;
+#endif
+}
+
+bool CEGLNativeTypeRockchip::GetNativeDisplay(XBNativeDisplayType **nativeDisplay) const
+{
+  if (!nativeDisplay)
+    return false;
+  *nativeDisplay = (XBNativeDisplayType*) &m_nativeDisplay;
+  return true;
+}
+
+bool CEGLNativeTypeRockchip::GetNativeWindow(XBNativeWindowType **nativeWindow) const
+{
+  if (!nativeWindow)
+    return false;
+  *nativeWindow = (XBNativeWindowType*) &m_nativeWindow;
+  return true;
+}
+
+bool CEGLNativeTypeRockchip::DestroyNativeDisplay()
+{
+  return true;
+}
+
+bool CEGLNativeTypeRockchip::DestroyNativeWindow()
+{
+#if defined(_FBDEV_WINDOW_H_)
+  delete (fbdev_window*)m_nativeWindow, m_nativeWindow = NULL;
+#endif
+  return true;
+}
+
+bool CEGLNativeTypeRockchip::GetNativeResolution(RESOLUTION_INFO *res) const
+{
+  std::string mode;
+  SysfsUtils::GetString("/sys/class/drm/card0/device/graphics/" + m_framebuffer_name + "/mode", mode);
+  return RockchipModeToResolution(mode, res);
+}
+
+bool CEGLNativeTypeRockchip::SetNativeResolution(const RESOLUTION_INFO &res)
+{
+#if defined(_FBDEV_WINDOW_H_)
+  if (m_nativeWindow)
+  {
+    ((fbdev_window *)m_nativeWindow)->width = res.iScreenWidth;
+    ((fbdev_window *)m_nativeWindow)->height = res.iScreenHeight;
+  }
+#endif
+
+  SetFramebufferResolution(res);
+  return true;
+}
+
+bool CEGLNativeTypeRockchip::ProbeResolutions(std::vector<RESOLUTION_INFO> &resolutions)
+{
+  std::string valstr;
+  if (SysfsUtils::GetString("/sys/class/drm/card0/device/graphics/" + m_framebuffer_name + "/modes", valstr) < 0)
+    return false;
+  std::vector<std::string> probe_str = StringUtils::Split(valstr, "\n");
+
+  resolutions.clear();
+  RESOLUTION_INFO res;
+  for (std::vector<std::string>::const_iterator i = probe_str.begin(); i != probe_str.end(); ++i)
+  {
+    if (RockchipModeToResolution(i->c_str(), &res))
+      resolutions.push_back(res);
+  }
+  return resolutions.size() > 0;
+}
+
+bool CEGLNativeTypeRockchip::GetPreferredResolution(RESOLUTION_INFO *res) const
+{
+  // check display/mode, it gets defaulted at boot
+  if (!GetNativeResolution(res))
+  {
+    // default to 1080p if we get nothing
+    RockchipModeToResolution("1920x1080p-0", res);
+  }
+
+  return true;
+}
+
+bool CEGLNativeTypeRockchip::ShowWindow(bool show)
+{
+  std::string blank_framebuffer = "/sys/class/drm/card0/device/graphics/" + m_framebuffer_name + "/blank";
+  SysfsUtils::SetInt(blank_framebuffer.c_str(), show ? 0 : 1);
+  return true;
+}
+
+void CEGLNativeTypeRockchip::SetFramebufferResolution(const RESOLUTION_INFO &res) const
+{
+  SetFramebufferResolution(res.iScreenWidth, res.iScreenHeight);
+}
+
+void CEGLNativeTypeRockchip::SetFramebufferResolution(int width, int height) const
+{
+  int fd0;
+  std::string framebuffer = "/dev/" + m_framebuffer_name;
+
+  if ((fd0 = open(framebuffer.c_str(), O_RDWR)) >= 0)
+  {
+    struct fb_var_screeninfo vinfo;
+    if (ioctl(fd0, FBIOGET_VSCREENINFO, &vinfo) == 0)
+    {
+      vinfo.xres = width;
+      vinfo.yres = height;
+      vinfo.xres_virtual = width;
+      vinfo.yres_virtual = height;
+      vinfo.bits_per_pixel = 32;
+      vinfo.activate = FB_ACTIVATE_ALL;
+      ioctl(fd0, FBIOPUT_VSCREENINFO, &vinfo);
+    }
+    close(fd0);
+  }
+}
diff --git a/xbmc/windowing/egl/EGLNativeTypeRockchip.h b/xbmc/windowing/egl/EGLNativeTypeRockchip.h
new file mode 100644
index 0000000000..33487e98fe
--- /dev/null
+++ b/xbmc/windowing/egl/EGLNativeTypeRockchip.h
@@ -0,0 +1,58 @@
+/*
+ *      Copyright (C) 2017 Team Kodi
+ *      http://kodi.tv
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this Program; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#pragma once
+
+#include <string>
+#include <vector>
+
+#include "EGLNativeType.h"
+class CEGLNativeTypeRockchip : public CEGLNativeType
+{
+public:
+  CEGLNativeTypeRockchip();
+  virtual ~CEGLNativeTypeRockchip();
+  virtual std::string GetNativeName() const { return "rockchip"; };
+  virtual bool  CheckCompatibility();
+  virtual void  Initialize();
+  virtual void  Destroy();
+  virtual int   GetQuirks() { return EGL_QUIRK_NONE; };
+
+  virtual bool  CreateNativeDisplay();
+  virtual bool  CreateNativeWindow();
+  virtual bool  GetNativeDisplay(XBNativeDisplayType **nativeDisplay) const;
+  virtual bool  GetNativeWindow(XBNativeWindowType **nativeWindow) const;
+
+  virtual bool  DestroyNativeWindow();
+  virtual bool  DestroyNativeDisplay();
+
+  virtual bool  GetNativeResolution(RESOLUTION_INFO *res) const;
+  virtual bool  SetNativeResolution(const RESOLUTION_INFO &res);
+  virtual bool  ProbeResolutions(std::vector<RESOLUTION_INFO> &resolutions);
+  virtual bool  GetPreferredResolution(RESOLUTION_INFO *res) const;
+
+  virtual bool  ShowWindow(bool show);
+
+private:
+  void SetFramebufferResolution(const RESOLUTION_INFO &res) const;
+  void SetFramebufferResolution(int width, int height) const;
+
+  std::string m_framebuffer_name;
+};
diff --git a/xbmc/windowing/egl/EGLWrapper.cpp b/xbmc/windowing/egl/EGLWrapper.cpp
index 30f57577d6..de2c67a8bb 100644
--- a/xbmc/windowing/egl/EGLWrapper.cpp
+++ b/xbmc/windowing/egl/EGLWrapper.cpp
@@ -37,6 +37,9 @@
 #if defined(TARGET_LINUX) && defined(HAS_LIBAMCODEC)
 #include "EGLNativeTypeAmlogic.h"
 #endif
+#if defined(HAS_RKMPP)
+  #include "EGLNativeTypeRockchip.h"
+#endif
 #include "EGLWrapper.h"
 
 #define CheckError() m_result = eglGetError(); if(m_result != EGL_SUCCESS) CLog::Log(LOGERROR, "EGL error in %s: %x",__FUNCTION__, m_result);
@@ -101,6 +104,8 @@ bool CEGLWrapper::Initialize(const std::string &implementation)
       (nativeGuess = CreateEGLNativeType<CEGLNativeTypeIMX>(implementation))
 #elif defined(TARGET_LINUX) && defined(HAS_LIBAMCODEC)
       (nativeGuess = CreateEGLNativeType<CEGLNativeTypeAmlogic>(implementation))
+#elif defined(HAS_RKMPP)
+      (nativeGuess = CreateEGLNativeType<CEGLNativeTypeRockchip>(implementation))
 #endif
       )
   {
